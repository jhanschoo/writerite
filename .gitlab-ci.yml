default:
  image: docker:19.03

stages:
  # - build_servers
  # - build_clients
  - deploy

variables:
  # secrets configured in UI/API:
  # - K8S_SECRET_ENGINE_API_KEY
  # - KUBERNETES_VERSION
  # - HELM_VERSION
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  ENGINE_API_KEY: $K8S_SECRET_ENGINE_API_KEY
  POSTGRES_USER: prisma
  POSTGRES_PASSWORD: prisma
  PRISMA_CONFIG: |
    port: 4466
    databases:
      default:
        connector: postgres
        host: postgres
        port: 5432
        user: $POSTGRES_USER
        password: $POSTGRES_PASSWORD
  # note: docker hostname refers to the docker host with image docker:dind
  PRISMA_ENDPOINT: http://docker:4466/writerite/build

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# build_backend-apollo:
#   stage: build_servers
#   variables:
#     DOCKER_NETWORK_ID: build-$CI_JOB_ID
#     IMAGE_NAME: $CI_REGISTRY_IMAGE/backend-apollo
#   script:
#     - docker network create $DOCKER_NETWORK_ID
#     - docker run --name postgres -d -e POSTGRES_USER -e POSTGRES_PASSWORD --network=$DOCKER_NETWORK_ID postgres:11.5-alpine
#     - docker run --name prisma -d -e PRISMA_CONFIG --network=$DOCKER_NETWORK_ID -p 4466:4466 prismagraphql/prisma:1.34
#     - apk add --update nodejs npm zsh python2 make g++
#     - cd backend-apollo
#     - npm install
#     - sh dockerbuild.sh build
#     - echo "IMPORTANT: make sure that the versions for backend-apollo and its dependencies in the deployment scripts are updated."
#   # note that prisma cannot be run as a service due to
#   # https://gitlab.com/gitlab-org/gitlab-runner/issues/1042
#   services:
#     - docker:19.03-dind

# build_wright-node:
#   stage: build_clients
#   variables:
#     IMAGE_NAME: $CI_REGISTRY_IMAGE/wright-node
#   script:
#     - apk add --update nodejs npm zsh python2 make g++
#     - cd wright-node
#     - npm install
#     - sh dockerbuild.sh build
#     - echo "IMPORTANT: make sure that the versions for wright-node and its dependencies in the deployment scripts are updated."
#   services:
#     - docker:19.03-dind

# c.f. https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Jobs/Deploy.gitlab-ci.yml
# c.f. https://gitlab.com/gitlab-org/cluster-integration/auto-deploy-image/blob/master/src/bin/auto-deploy
deploy_ritewrite:
  stage: deploy
  script:
    - apk add --update nodejs curl sed bash
    - export BACKEND_APOLLO_PACKAGE_VERSION=$(node -pe "require('./backend-apollo/package.json').version")
    - export WRIGHT_NODE_PACKAGE_VERSION=$(node -pe "require('./wright-node/package.json').version")
    - export BACKEND_APOLLO_IMAGE="$CI_REGISTRY_IMAGE/backend-apollo:$BACKEND_APOLLO_PACKAGE_VERSION"
    - export WRIGHT_NODE_IMAGE="$CI_REGISTRY_IMAGE/wright-node:$WRIGHT_NODE_PACKAGE_VERSION"
    # - docker pull "$BACKEND_APOLLO_IMAGE-build"
    # - docker tag "$BACKEND_APOLLO_IMAGE-build" "$BACKEND_APOLLO_IMAGE"
    # - docker push "$BACKEND_APOLLO_IMAGE"
    # - docker pull "$WRIGHT_NODE_IMAGE-build"
    # - docker tag "$WRIGHT_NODE_IMAGE-build" "$WRIGHT_NODE_IMAGE"
    # - docker push "$WRIGHT_NODE_IMAGE"
    # TODO: verify kubectl binary
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/v$KUBERNETES_VERSION/bin/linux/amd64/kubectl
    - chmod +x kubectl
    - mv kubectl /usr/bin
    # TODO: verify helm package
    - curl -L https://get.helm.sh/helm-v$HELM_VERSION-linux-amd64.tar.gz | tar zx
    - mv linux-amd64/helm /usr/bin/
    - mv linux-amd64/tiller /usr/bin/
    - bash ci/deploy.sh
  environment:
    name: production
    url: https://ritewrite.site
  when: manual
  # only:
  #   - master
  services:
    - docker:19.03-dind
default:
  image: docker:19.03

stages:
  # - build-servers
  # - build-clients
  - deploy

variables:
  # secret configured in UI/API: ENGINE_API_KEY
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  POSTGRES_USER: prisma
  POSTGRES_PASSWORD: prisma
  PRISMA_CONFIG: |
    port: 4466
    databases:
      default:
        connector: postgres
        host: postgres
        port: 5432
        user: $POSTGRES_USER
        password: $POSTGRES_PASSWORD
  # note: docker hostname refers to the docker host with image docker:dind
  PRISMA_ENDPOINT: http://docker:4466/writerite/build

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# build-backend-apollo:
#   stage: build-servers
#   variables:
#     DOCKER_NETWORK_ID: build-$CI_JOB_ID
#     IMAGE_NAME: $CI_REGISTRY_IMAGE/backend-apollo
#   script:
#     - docker network create $DOCKER_NETWORK_ID
#     - docker run --name postgres -d -e POSTGRES_USER -e POSTGRES_PASSWORD --network=$DOCKER_NETWORK_ID postgres:11.5-alpine
#     - docker run --name prisma -d -e PRISMA_CONFIG --network=$DOCKER_NETWORK_ID -p 4466:4466 prismagraphql/prisma:1.34
#     - apk add --update nodejs npm zsh python2 make g++
#     - cd backend-apollo
#     - npm install
#     - sh dockerbuild.sh build
#   # note that prisma cannot be run as a service due to
#   # https://gitlab.com/gitlab-org/gitlab-runner/issues/1042
#   services:
#     - docker:19.03-dind

# build-wright-node:
#   stage: build-clients
#   variables:
#     IMAGE_NAME: $CI_REGISTRY_IMAGE/wright-node
#   script:
#     - apk add --update nodejs npm zsh python2 make g++
#     - cd wright-node
#     - npm install
#     - sh dockerbuild.sh build
#   services:
#     - docker:19.03-dind

deploy:
  stage: deploy
  script:
    - apk add --update nodejs sed
    - apk add --update kubernetes --repository http://dl-3.alpinelinux.org/alpine/edge/testing/
    - BACKEND_APOLLO_PACKAGE_VERSION=$(node -pe "require('./backend-apollo/package.json').version")
    - WRIGHT_NODE_PACKAGE_VERSION=$(node -pe "require('./wright-node/package.json').version")
    - BACKEND_APOLLO_IMAGE="$CI_REGISTRY_IMAGE/backend-apollo:$BACKEND_APOLLO_PACKAGE_VERSION"
    - WRIGHT_NODE_IMAGE="$CI_REGISTRY_IMAGE/wright-node:$WRIGHT_NODE_PACKAGE_VERSION"
    - docker pull "$BACKEND_APOLLO_IMAGE-build"
    - docker tag "$BACKEND_APOLLO_IMAGE-build" "$BACKEND_APOLLO_IMAGE"
    - docker push "$BACKEND_APOLLO_IMAGE"
    - docker pull "$WRIGHT_NODE_IMAGE-build"
    - docker tag "$WRIGHT_NODE_IMAGE-build" "$WRIGHT_NODE_IMAGE"
    - docker push "$WRIGHT_NODE_IMAGE"
    - kubectl get deploy
    - kubectl apply -f kubernetes/core/postgres.pvc.yaml
    # - echo KUBE_INGRESS_BASE_DOMAIN $KUBE_INGRESS_BASE_DOMAIN
    # - echo KUBE_URL $KUBE_URL
    # - echo KUBE_TOKEN $KUBE_TOKEN
    # - echo KUBE_NAMESPACE $KUBE_NAMESPACE
    # - echo KUBE_CA_PEM_FILE $KUBE_CA_PEM_FILE
    # - echo KUBECONFIG $KUBECONFIG
  environment:
    name: production
    url: https://ritewrite.site
  # only:
  #   - master
  services:
    - docker:19.03-dind
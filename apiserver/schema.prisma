generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource postgresql {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Unit {
  UNIT
}

enum RoomState {
  WAITING
  SERVING
  SERVED
}

model Card {
  id         String           @default(cuid()) @id
  deckId     String
  // prompt is a JsonObject
  prompt     Json?
  // fullAnswer is a JsonObject
  fullAnswer Json?
  answers    String[]
  template   Boolean          @default(false)
  default    Unit?
  editedAt   DateTime         @default(now())
  deck       Deck             @relation(fields: [deckId], references: [id], onDelete: Cascade)

  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt

  records    UserCardRecord[]

  @@unique([deckId, default])
  // CHECK ("template" OR "default" IS NULL);
}

model Message {
  id        String   @default(cuid()) @id
  roomId    String
  senderId  String?
  type      String
  content   Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender    User?    @relation(fields: [senderId], references: [id], onDelete: SetNull)
}

model Deck {
  id           String           @default(cuid()) @id
  ownerId      String
  name         String           @default("")
  // description is a JsonObject if not null
  description  Json?
  promptLang   String           @default("")
  answerLang   String           @default("")
  published    Boolean          @default(false)
  // editedAt represents the time the deck's content fields (i.e. not
  // usedAt, not updatedAt), or one of its cards was last edited.
  // unenforced constraint: editedAt > UserCardRecord.updatedAt,
  //   for all UserCardRecords belonging to cards of this deck.
  editedAt     DateTime         @default(now())
  // usedAt represents the time the deck was last served in a room, or edited, etc.
  // unenforced constraint: usedAt > UserCardRecord.updatedAt,
  //   for all UserCardRecords belonging to cards of this deck.
  usedAt       DateTime         @default(now()) @updatedAt

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt

  owner        User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  cards        Card[]
  rooms        Room[]
  // sortData is an array of IDs, indicating that cards of this deck with IDs
  //   in this array should be displayed in the order they appear in the array.
  sortData     String[]
  parentDeckIn Subdeck[]        @relation("DeckTo_Subdeck_parentDeckId")
  subdeckIn    Subdeck[]        @relation("DeckTo_Subdeck_subdeckId")
  records      UserDeckRecord[]
}

//See: https://github.com/prisma/prisma/issues/2057
model Occupant {
  id         String   @default(cuid()) @id
  roomId     String
  occupantId String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  room       Room     @relation("RoomTo_Occupant", fields: [roomId], references: [id], onDelete: Cascade)
  occupant   User     @relation("UserTo_Occupant", fields: [occupantId], references: [id], onDelete: Cascade)

  @@unique([roomId, occupantId])
  @@index([occupantId])
}

model Room {
  id              String     @default(cuid()) @id
  ownerId         String
  // slug is a string for the URL with the following property
  // when state is non-terminal, slug is some short cuid
  // when state is terminal, slug is null
  slug            String?    @unique
  deckId          String?
  state           RoomState  @default(WAITING)

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt

  deck            Deck?      @relation(fields: [deckId], references: [id], onDelete: Cascade)
  owner           User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  occupants       Occupant[] @relation("RoomTo_Occupant")
  chatMsgs        Message[]
  roomInvitations RoomInvitation[]
}

model RoomInvitation {
  id         String     @default(cuid()) @id
  senderId   String
  receiverId String
  roomId     String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  sender     User     @relation("UserTo_RoomInvitation_senderId", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("UserTo_RoomInvitation_receiverId", fields: [receiverId], references: [id], onDelete: Cascade)
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  @@unique([senderId, receiverId, roomId])
  @@index([receiverId])
}

//See: https://github.com/prisma/prisma/issues/2057
model Subdeck {
  id           String   @default(cuid()) @id
  parentDeckId String
  subdeckId    String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  parentDeck   Deck     @relation("DeckTo_Subdeck_parentDeckId", fields: [parentDeckId], references: [id], onDelete: Cascade)
  subdeck      Deck     @relation("DeckTo_Subdeck_subdeckId", fields: [subdeckId], references: [id], onDelete: Cascade)

  @@unique([parentDeckId, subdeckId])
  @@index([subdeckId])
}

model User {
  id             String           @default(cuid()) @id
  facebookId     String?          @unique
  googleId       String?          @unique
  name           String?          @unique
  passwordHash   String?
  roles          String[]
  isPublic       Boolean          @default(false)

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt

  decks          Deck[]
  ownedRooms     Room[]
  occupyingRooms Occupant[]       @relation("UserTo_Occupant")
  sentChatMsgs   Message[]
  cardRecords    UserCardRecord[]
  deckRecords    UserDeckRecord[]

  befrienderIn   Friendship[]        @relation("UserTo_Friendship_befrienderId")
  befriendedIn   Friendship[]        @relation("UserTo_Friendship_befriendedId")
  sentRoomInvitations     RoomInvitation[]        @relation("UserTo_RoomInvitation_senderId")
  receivedRoomInvitations RoomInvitation[]        @relation("UserTo_RoomInvitation_receiverId")
}

model Friendship {
  id           String   @default(cuid()) @id
  befrienderId String
  befriendedId String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  befriender   User?    @relation("UserTo_Friendship_befrienderId", fields: [befrienderId], references: [id], onDelete: Cascade)
  befriended   User?    @relation("UserTo_Friendship_befriendedId", fields: [befriendedId], references: [id], onDelete: Cascade)

  @@unique([befrienderId, befriendedId])
  @@index([befriendedId])
}

model UserCardRecord {
  id             String     @default(cuid()) @id
  userId         String
  cardId         String
  correctRecord  DateTime[]

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt

  card           Card       @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, cardId])
}

model UserDeckRecord {
  id        String   @default(cuid()) @id
  userId    String
  deckId    String
  // notes is a JsonObject
  notes     Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  deck      Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deckId])
}

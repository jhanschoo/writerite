import { GraphQLSchema } from 'graphql';
import { Plugin, GetEnvelopedFn, UseMaskedErrorsOpts } from '@envelop/core';
import { IResolvers, TypeSource } from '@graphql-tools/utils';
import { CORSOptions, YogaInitialContext, YogaLogger } from './types';
import { GraphiQLOptions, renderGraphiQL } from './graphiql';
interface OptionsWithPlugins<TContext> {
    /**
     * Envelop Plugins
     * @see https://envelop.dev/plugins
     */
    plugins: Array<Plugin<TContext> | 0>;
}
/**
 * Configuration options for the server
 */
export declare type YogaServerOptions<TContext, TRootValue> = {
    /**
     * Enable/disable logging or provide a custom logger.
     * @default true
     */
    logging?: boolean | YogaLogger;
    /**
     * Prevent leaking unexpected errors to the client. We highly recommend enabling this in production.
     * If you throw `GraphQLYogaError`/`EnvelopError` within your GraphQL resolvers then that error will be sent back to the client.
     *
     * You can lean more about this here:
     * @see https://www.envelop.dev/plugins/use-masked-errors
     *
     * Default: `false`
     */
    maskedErrors?: boolean | UseMaskedErrorsOpts;
    /**
     * Context
     */
    context?: ((initialContext: YogaInitialContext) => Promise<TContext> | TContext) | Promise<TContext> | TContext;
    cors?: ((request: Request) => CORSOptions) | CORSOptions | boolean;
    /**
     * GraphiQL options
     *
     * Default: `true`
     */
    graphiql?: GraphiQLOptions | false;
    schema?: GraphQLSchema | {
        typeDefs: TypeSource;
        resolvers?: IResolvers<TRootValue, TContext> | Array<IResolvers<TRootValue, TContext>>;
    };
} & Partial<OptionsWithPlugins<TContext>>;
export declare function getDefaultSchema(): GraphQLSchema;
/**
 * Base class that can be extended to create a GraphQL server with any HTTP server framework.
 * @internal
 */
export declare class YogaServer<TContext extends YogaInitialContext, TRootValue> {
    /**
     * Instance of envelop
     */
    readonly getEnveloped: GetEnvelopedFn<TContext>;
    logger: YogaLogger;
    private readonly corsOptionsFactory;
    protected readonly graphiql: GraphiQLOptions | false;
    constructor(options?: YogaServerOptions<TContext, TRootValue>);
    handleOptions(request: Request): Response;
    private id;
    handleRequest: (request: Request) => Promise<Response>;
}
export declare function createServer<TContext extends YogaInitialContext, TRootValue>(options?: YogaServerOptions<TContext, TRootValue>): YogaServer<TContext, TRootValue>;
export { renderGraphiQL };

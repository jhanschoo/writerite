/// <reference types="node" />
import { IncomingMessage, Server as NodeServer, ServerResponse } from 'http';
import { NodeRequest } from './http-utils';
import { YogaServer, YogaInitialContext } from '@graphql-yoga/common';
import type { GraphQLServerInject, YogaNodeServerOptions, AddressInfo } from './types';
import LightMyRequest from 'light-my-request';
import { ExecutionResult } from 'graphql';
declare class YogaNodeServer<TContext extends YogaInitialContext, TRootValue> extends YogaServer<TContext, TRootValue> {
    private options?;
    /**
     * Address Information for Server
     */
    private addressInfo;
    private nodeServer;
    constructor(options?: YogaNodeServerOptions<TContext, TRootValue> | undefined);
    getNodeServer(): NodeServer | null;
    getAddressInfo(): AddressInfo;
    handleIncomingMessage(nodeRequest: NodeRequest): Promise<Response>;
    requestListener: (req: IncomingMessage, res: ServerResponse) => Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    /**
     * Testing utility to mock http request for GraphQL endpoint
     *
     *
     * Example - Test a simple query
     * ```ts
     * const response = await yoga.inject({
     *  document: "query { ping }",
     * })
     * expect(response.statusCode).toBe(200)
     * expect(response.data.ping).toBe('pong')
     * ```
     **/
    inject<TData = any, TVariables = any>({ document, variables, operationName, headers, }: GraphQLServerInject<TData, TVariables>): Promise<{
        response: LightMyRequest.Response;
        executionResult: ExecutionResult<TData>;
    }>;
}
/**
 * Create a simple yet powerful GraphQL server ready for production workloads.
 * Spec compliant server that supports bleeding edge GraphQL features without any vendor lock-ins.
 *
 * Comes baked in with:
 *
 * - Envelop - Plugin system for GraphQL
 * - GraphiQL - GraphQL IDE for your browser
 * - Pino - Super fast, low overhead Node.js logger
 *
 * Example:
 * ```ts
 *  import { schema } from './schema'
 *   // Provide a GraphQL schema
 *  const server = createServer({ schema })
 *  // Start the server. Defaults to http://localhost:4000/graphql
 *  server.start()
 * ```
 */
export declare function createServer<TContext extends YogaInitialContext, TRootValue>(options?: YogaNodeServerOptions<TContext, TRootValue>): YogaNodeServer<TContext, TRootValue>;
export { ExecutionPatchResult, YogaInitialContext, CORSOptions, YogaLogger, GraphQLYogaError, shouldRenderGraphiQL, renderGraphiQL, GraphiQLOptions, } from '@graphql-yoga/common';
export * from '@envelop/core';
export * from '@graphql-yoga/subscription';

### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Card {
  answers: [String!]!
  editedAt: DateTime!
  fullAnswer: JSONObject!
  id: ID!
  mainTemplate: Boolean!
  ownRecord: UserCardRecord
  prompt: JSONObject!
  sortKey: String!
  template: Boolean!
}

input CardCreateInput {
  answers: [String!]!
  fullAnswer: JSONObject!
  prompt: JSONObject!
  sortKey: String
  template: Boolean
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Deck {
  answerLang: String!
  archived: Boolean!

  """
  all cards directly belonging to some descendant (reflexive, transitive closure of subdeck) deck of this deck
  """
  cardsAllUnder: [Card!]!

  """all cards directly belonging to this deck"""
  cardsDirect: [Card!]!

  """
  all descendant (reflexive, transitive closure of subdeck) decks of this deck
  """
  descendantDecks: [Deck!]!
  description: JSONObject!
  editedAt: DateTime!
  id: ID!
  name: String!
  ownRecord: UserDeckRecord
  owner: User!
  ownerId: ID!
  promptLang: String!
  published: Boolean!

  """all direct subdecks of this deck"""
  subdecks: [Deck!]!
  usedAt: DateTime!
}

enum DecksQueryScope {
  OWNED
  PARTICIPATED
  UNARCHIVED
  VISIBLE
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type Message {
  content: JSON!
  createdAt: DateTime!
  id: ID!
  room: Room!
  roomId: ID!
  sender: User
  senderId: ID
  type: MessageContentType!
}

enum MessageContentType {
  CONFIG
  CONTEST_SCORE
  ROUND_SCORE
  ROUND_START
  ROUND_WIN
  TEXT
}

type Mutation {
  cardCreate(card: CardCreateInput!, deckId: ID!, mainTemplate: Boolean): Card!
  cardDelete(id: ID!): Card!
  cardEdit(answers: [String!], fullAnswer: JSONObject, id: ID!, mainTemplate: Boolean, prompt: JSONObject, sortKey: String, template: Boolean): Card!
  cardUnsetMainTemplate(deckId: ID!): Card
  deckAddSubdeck(id: ID!, subdeckId: ID!): Deck!
  deckCreate(answerLang: String, archived: Boolean, cards: [CardCreateInput!], description: JSONObject, name: String, promptLang: String, published: Boolean): Deck!
  deckDelete(id: ID!): Deck!
  deckEdit(answerLang: String, archived: Boolean, description: JSONObject, id: ID!, name: String, promptLang: String, published: Boolean): Deck!
  deckRemoveSubdeck(id: ID!, subdeckId: ID!): Deck!
  deckUsed(id: ID!): Deck!

  """
  @subscriptionsTriggered(
      signatures: ["chatMsgsOfRoomUpdates"]
    )
  """
  messageCreate(content: JSON, roomId: ID!, type: MessageContentType!): Message!
  ownCardRecordSet(cardId: ID!, correctRecordAppend: [DateTime!]!): UserCardRecord
  ownDeckRecordSet(deckId: ID!, notes: JSONObject!): UserDeckRecord!

  """
  @subscriptionsTriggered(
      signatures: ["roomUpdates", "roomsUpdates"]
    )
  """
  roomAddOccupant(id: ID!, occupantId: ID!): Room!

  """
  @subscriptionsTriggered(
      signatures: ["roomUpdates", "roomsUpdates"]
    )
  """
  roomAddOccupantByEmail(email: EmailAddress!, id: ID!): Room!

  """
  @subscriptionsTriggered(
      signatures: ["roomUpdates", "roomsUpdates"]
    )
  """
  roomCleanUpDead: Int!

  """
  @subscriptionsTriggered(
      signatures: ["roomUpdates", "roomsUpdates"]
    )
  """
  roomCreate(ownerConfig: JSONObject!): Room!

  """
  @subscriptionsTriggered(
      signatures: ["roomUpdates", "roomsUpdates"]
    )
  """
  roomEditOwnerConfig(id: ID!, ownerConfig: JSONObject!): Room!

  """
  @subscriptionsTriggered(
      signatures: ["roomUpdates", "roomsUpdates"]
    )
  """
  roomSetState(id: ID!, state: RoomState!): Room!
  signin(authorizer: String!, email: String!, identifier: String!, name: String, persist: Boolean, token: String!): JWT
  userEdit(isPublic: Boolean, name: String): User!
}

type Query {
  deck(id: ID!): Deck!

  """
  	implicit limit of 60
  	
  """
  decks(cursor: ID, scope: DecksQueryScope, take: Int, titleFilter: String): [Deck!]!
  health: String!
  message(id: ID!): Message!
  messagesOfRoom(id: ID!): [Message!]!
  occupyingRooms: [Room!]!
  ownDeckRecord(deckId: ID!): UserDeckRecord
  room(id: ID!): Room!
  user(id: ID!): User!
}

type Room {
  id: ID!
  internalConfig: JSONObject!
  messages: [Message!]!
  occupants: [User!]!
  owner: User!
  ownerConfig: JSONObject!
  ownerId: ID!
  state: RoomState!
}

enum RoomState {
  SERVED
  SERVING
  WAITING
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

type User {
  decks: [Deck!]!
  email: EmailAddress!
  id: ID!
  isPublic: Boolean!
  name: String!
  occupyingRooms: [Room!]!
  ownedRooms: [Room!]!
  roles: [String!]!
}

type UserCardRecord {
  cardId: ID!
  correctRecord: [DateTime!]!
  userId: ID!
}

type UserDeckRecord {
  deckId: ID!
  notes: JSONObject!
  userId: ID!
}

# TODO: refactor once graphql supports `extend`
# https://github.com/graphql/graphql-js/issues/922\

#scalar Upload
scalar DateTime
scalar JSON
scalar JSONObject

directive @subscriptionsTriggered(
  signatures: [String!]!
) on FIELD_DEFINITION

# Note: null in inputs are allowed only in update-style methods,
#   meaning that the field should be nulled.
# The following directive on an optional argument specifies
#   that it accepts omission of the argument, but it does
#   not accept a null as the input value for the argument.
directive @nonNull on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

enum ChatMsgContentType {
  TEXT
  CONFIG
}

enum UpdateType {
  CREATED
  EDITED
  DELETED
}

enum DecksQueryScope {
  OWNED
  PARTICIPATED
  VISIBLE
}

enum RoomState {
  WAITING
  SERVING
  SERVED
}

type Query {
  # User
  user(id: ID!): User
  # Deck
  deck(id: ID!): Deck
  # implicit limit of 60
  decks(cursor: ID take: Int titleFilter: String scope: DecksQueryScope): [Deck]
  # UserDeckRecord
  ownDeckRecord(deckId: ID!): UserDeckRecord
  # Card
  card(id: ID!): Card
  cardsOfDeck(deckId: ID!): [Card]
  # UserCardRecord
  ownCardRecord(cardId: ID!): UserCardRecord
  # Room
  room(id: ID!): Room
  occupyingRooms: [Room]
  # ChatMsg
  chatMsg(id: ID!): ChatMsg
  chatMsgsOfRoom(roomId: ID!): [ChatMsg]
}

type Mutation {
  # Authorization
  signin(
    email: String!
    name: String @nonNull
    token: String!
    authorizer: String!
    identifier: String!
    persist: Boolean @nonNull
  ): AuthResponse

  # User
  userEdit(name: String): User

  # Deck
  deckCreate(
    name: String @nonNull
    description: JSONObject @nonNull
    promptLang: String @nonNull
    answerLang: String @nonNull
    published: Boolean @nonNull
    cards: [CardCreateInput!] @nonNull
  ): Deck @subscriptionsTriggered(
    signatures: ["ownDecksUpdates"]
  )

  deckEdit(
    id: ID!
    name: String @nonNull
    description: JSONObject @nonNull
    promptLang: String @nonNull
    answerLang: String @nonNull
    published: Boolean @nonNull
  ): Deck @subscriptionsTriggered(
    signatures: ["ownDecksUpdates"]
  )

  deckAddSubdeck(
    id: ID! subdeckId: ID!
  ): Deck @subscriptionsTriggered(
    signatures: ["ownDecksUpdates"]
  )

  deckRemoveSubdeck(
    id: ID! subdeckId: ID!
  ): Deck @subscriptionsTriggered(
    signatures: ["ownDecksUpdates"]
  )

  deckDelete(
    id: ID!
  ): Deck @subscriptionsTriggered(
    signatures: ["ownDecksUpdates"]
  )

  # UserDeckRecord
  ownDeckRecordSet(
    deckId: ID!
    notes: JSONObject @nonNull
  ): UserDeckRecord

  # Card
  cardCreate(
    deckId: ID!
    card: CardCreateInput!
    # note that template is set to true if mainTemplate
    # is set to true and template is unspecified
    mainTemplate: Boolean! @nonNull
  ): Card @subscriptionsTriggered(
    # Note: if mainTempate of another card became unset,
    # subscription doesn't fire for that card.
    # clients subscribed to cardsOfDeckUpdates should
    # infer that the mainTemplate field of another card becomes
    # unset (if it does) from the mainTemplate field from
    # the returned card becoming set
    signatures: ["cardsOfDeckUpdates"]
  )

  cardEdit(
    id: ID!
    prompt: JSONObject @nonNull
    fullAnswer: JSONObject @nonNull
    answers: [String!] @nonNull
    sortKey: String @nonNull
    # note that template is set to true if mainTemplate
    # is set to true and template is unspecified
    template: Boolean @nonNull
    mainTemplate: Boolean @nonNull
  ): Card @subscriptionsTriggered(
    # Note: if mainTempate of another card became unset,
    # subscription doesn't fire for that card.
    # clients subscribed to cardsOfDeckUpdates should
    # infer that the mainTemplate field of another card becomes
    # unset (if it does) from the mainTemplate field from
    # the returned card becoming set
    signatures: ["cardsOfDeckUpdates"]
  )

  # unmarks the card currently set as the main template of the deck if it exists
  # returns true if unset, false if noop, null if error
  cardUnsetMainTemplate(
    deckId: ID!
  ): Boolean!

  cardDelete(
    id: ID!
  ): Card @subscriptionsTriggered(
    signatures: ["cardsOfDeckUpdates"]
  )

  # UserCardRecord
  ownCardRecordSet(
    cardId: ID!
    # ISO datetimes
    correctRecord: [String!] @nonNull
  ): UserCardRecord

  # Room
  roomCreate(ownerConfig: JSONObject @nonNull): Room @subscriptionsTriggered(
    signatures: ["roomUpdates", "roomsUpdates"]
  )
  # Only legal when room state is WAITING
  roomEditOwnerConfig(
    id: ID!
    ownerConfig: JSONObject!
  ): Room @subscriptionsTriggered(
    signatures: ["roomUpdates", "roomsUpdates"]
  )
  # Only legal when room state is WAITING
  roomAddOccupant(id: ID!, occupantId: ID!): Room @subscriptionsTriggered(
    signatures: ["roomUpdates", "roomsUpdates"]
  )

  # ChatMsg
  # merge apis for different types if following RFC passes
  # https://github.com/graphql/graphql-spec/blob/master/rfcs/InputUnion.md
  chatMsgCreate(
    roomId: ID!
    type: ChatMsgContentType!
    content: String!
  ): ChatMsg @subscriptionsTriggered(
    signatures: ["chatMsgsOfRoomUpdates"]
  )

  chatMsgCreateInternal(
    roomId: ID!
    type: ChatMsgContentType!
    content: String!
  ): ChatMsg @subscriptionsTriggered(
    signatures: ["chatMsgsOfRoomUpdates"]
  )
}

type Subscription {
  # Deck
  ownDecksUpdates: DeckUpdate
  # Card
  cardsOfDeckUpdates(deckId: ID!): CardUpdate
  # Room
  roomUpdates(id: ID!): RoomUpdate
  roomsUpdates: RoomUpdate
  # ChatMsg
  chatMsgsOfRoomUpdates(roomId: ID!): ChatMsgUpdate
}

type DeckUpdate {
  type: UpdateType!
  data: Deck
}
type CardUpdate {
  type: UpdateType!
  data: Card
}

type ChatMsgUpdate {
  type: UpdateType!
  data: ChatMsg
}

type RoomUpdate {
  type: UpdateType!
  data: Room
}

# User

type User {
  id: ID!
  email: String!
  name: String
  roles: [String!]!

  # R fields
  decks: [Deck]
  ownedRooms: [Room]
  occupyingRooms: [Room]
}

# Deck

type Deck {
  id: ID!
  ownerId: ID!
  name: String!
  description: JSON!
  promptLang: String!
  answerLang: String!
  published: Boolean!
  editedAt: DateTime!
  usedAt: DateTime!

  # R fields
  owner: User
  subdecks: [Deck]
  cards: [Card]
  ownRecord: UserDeckRecord
}

type UserDeckRecord {
  userId: ID!
  deckId: ID!
  notes: JSON!
}

# Card

input CardCreateInput {
  prompt: JSONObject!
  fullAnswer: JSONObject!
  answers: [String!]!
  sortKey: String @nonNull
  template: Boolean @nonNull
}

type Card {
  id: ID!
  deckId: ID!
  prompt: JSON!
  fullAnswer: JSON!
  answers: [String!]!
  sortKey: String!
  template: Boolean!
  mainTemplate: Boolean!
  editedAt: DateTime!

  # R fields
  deck: Deck
  ownRecord: UserCardRecord
}

type UserCardRecord {
  userId: ID!
  cardId: ID!
  correctRecord: [DateTime]!
}

# Room

type Room {
  id: ID!
  ownerId: ID!
  ownerConfig: JSONObject!
  internalConfig: JSONObject!
  state: RoomState!

  owner: User
  occupants: [User]
  chatMsgs: [ChatMsg]
}

# ChatMsg

type ChatMsg {
  id: ID!
  roomId: ID!
  senderId: ID
  type: ChatMsgContentType!
  content: String!

  # R Fields
  sender: User # Can be null w/o error
  room: Room
}

# WrAuthorization

type AuthResponse {
  token: String!
}

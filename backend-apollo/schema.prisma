generator client {
  provider = "prisma-client-js"
}

datasource postgresql {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Unit {
  UNIT
}

model Card {
  id         String           @default(dbgenerated()) @id
  deckId     String
  prompt     Json             @default("")
  fullAnswer Json             @default("")
  answers    String[]
  sortKey    String           @default("")
  template   Boolean          @default(false)
  default    Unit?
  editedAt   DateTime         @default(now())
  deck       Deck             @relation(fields: [deckId], references: [id])

  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt

  records    UserCardRecord[]

  @@unique([deckId, default])
  // CHECK ("template" OR "default" IS NULL);
}

model ChatMsg {
  id        String   @default(dbgenerated()) @id
  roomId    String
  senderId  String?
  type      String   @default("TEXT")
  content   String   @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  room      Room     @relation(fields: [roomId], references: [id])
  sender    User?    @relation(fields: [senderId], references: [id])
}

model Deck {
  id          String           @default(dbgenerated()) @id
  ownerId     String
  name        String           @default("")
  // I don't want to test if 'null'::jsonb works.
  // Also interferes with optional.
  description Json             @default("{}")
  promptLang  String           @default("")
  answerLang  String           @default("")
  published   Boolean          @default(false)
  // editedAt represents the time the deck's content fields (i.e. not
  // usedAt, not updatedAt), or one of its cards was last edited.
  // unenforced constraint: editedAt > UserCardRecord.updatedAt,
  //   for all UserCardRecords belonging to cards of this deck.
  editedAt    DateTime         @default(now())
  // usedAt represents the time the deck was last served in a room, or edited, etc.
  // unenforced constraint: usedAt > UserCardRecord.updatedAt,
  //   for all UserCardRecords belonging to cards of this deck.
  usedAt      DateTime         @default(now()) @updatedAt

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt

  owner       User             @relation(fields: [ownerId], references: [id])
  cards       Card[]
  subdecks    Subdeck[]        @relation("DeckTo_Subdeck_A")
  parentDecks Subdeck[]        @relation("DeckTo_Subdeck_B")
  records     UserDeckRecord[]
}

model Room {
  id        String     @default(dbgenerated()) @id
  ownerId   String
  config    Json       @default(dbgenerated())
  archived  Boolean    @default(false)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())

  owner     User       @relation(fields: [ownerId], references: [id])
  occupants Occupant[] @relation("RoomTo_Occupant")
  chatMsgs  ChatMsg[]
}

model User {
  id             String           @default(dbgenerated()) @id
  email          String           @unique
  facebookId     String?          @unique
  googleId       String?          @unique
  name           String?
  passwordHash   String?
  roles          String[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt

  decks          Deck[]
  ownedRooms     Room[]
  occupyingRooms Occupant[]       @relation("UserTo_Occupant")
  sentChatMsgs   ChatMsg[]
  cardRecords    UserCardRecord[]
  deckRecords    UserDeckRecord[]
}

model UserCardRecord {
  id             String     @default(dbgenerated()) @id
  userId         String
  cardId         String
  correctRecord  DateTime[]

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt

  card           Card       @relation(fields: [cardId], references: [id])
  user           User       @relation(fields: [userId], references: [id])

  @@unique([userId, cardId])
}

model UserDeckRecord {
  id        String   @default(dbgenerated()) @id
  userId    String
  deckId    String
  notes     Json     @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  deck      Deck     @relation(fields: [deckId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, deckId])
}

// no fields are actually nullable but they are written so as a workaround so that deletion cascades
// This following issue is also a blocker for upgrading @prisma/cli @prisma/client from v2.1.3 to v2.2.0
//See: https://github.com/prisma/prisma/issues/2057
model Occupant {
  A        String?
  B        String?
  room     Room?  @relation("RoomTo_Occupant", fields: [A], references: [id])
  occupant User?  @relation("UserTo_Occupant", fields: [B], references: [id])

  @@id([A, B])
  @@index([B], name: "_Occupant_B_idx")
  @@map("_Occupant")
}

// no fields are actually nullable but they are written so as a workaround so that deletion cascades
// This following issue is also a blocker for upgrading @prisma/cli @prisma/client from v2.1.3 to v2.2.0
//See: https://github.com/prisma/prisma/issues/2057
model Subdeck {
  A          String?
  B          String?
  parentDeck Deck?  @relation("DeckTo_Subdeck_A", fields: [A], references: [id])
  subdeck    Deck?  @relation("DeckTo_Subdeck_B", fields: [B], references: [id])

  @@id([A, B])
  @@index([B], name: "_Subdeck_B_idx")
  @@map("_Subdeck")
}
type Card implements Node {
  answers: [String!]!
  editedAt: DateTime!
  fullAnswer: JSONObject
  id: ID!
  isPrimaryTemplate: Boolean!
  isTemplate: Boolean!
  ownRecordCorrectHistory: [DateTime!]
  prompt: JSONObject
}

input CardCreateMutationInput {
  answers: [String!]!
  fullAnswer: JSONObject
  isPrimaryTemplate: Boolean
  isTemplate: Boolean!
  prompt: JSONObject
}

input CardEditMutationInput {
  answers: [String!]!
  fullAnswer: JSONObject
  id: ID!
  isPrimaryTemplate: Boolean
  isTemplate: Boolean!
  prompt: JSONObject
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Deck implements Node {
  answerLang: String!

  """
  all cards directly belonging to some descendant (reflexive, transitive closure of subdeck) deck of this deck
  """
  cardsAllUnder(after: ID, before: ID, first: Int, last: Int): DeckCardsAllUnderConnection!

  """all cards directly belonging to this deck"""
  cardsDirect(after: ID, before: ID, contains: String, first: Int, last: Int): DeckCardsDirectConnection!

  """number of all cards directly belonging to this deck"""
  cardsDirectCount: Int!
  createdAt: DateTime!

  """
  all descendant decks (reflexive, transitive closure of subdeck) of this deck
  """
  descendantDecks: [Deck!]!
  description: JSONObject
  editedAt: DateTime!
  id: ID!
  name: String!
  ownRecordNotes: JSONObject
  owner: User!
  promptLang: String!
  published: Boolean!
  sortData: [String!]!

  """all subdecks directly belonging to this deck"""
  subdecks: [Deck!]!
  subdecksCount: Int!
}

type DeckCardsAllUnderConnection {
  edges: [DeckCardsAllUnderConnectionEdge]!
  pageInfo: PageInfo!
}

type DeckCardsAllUnderConnectionEdge {
  cursor: ID!
  node: Card!
}

type DeckCardsDirectConnection {
  edges: [DeckCardsDirectConnectionEdge]!
  pageInfo: PageInfo!
}

type DeckCardsDirectConnectionEdge {
  cursor: ID!
  node: Card!
}

input DeckCreateMutationInput {
  answerLang: String!
  cards: [CardCreateMutationInput!]!
  description: JSONObject
  name: String!
  notes: JSONObject
  parentDeckId: ID
  promptLang: String!
  published: Boolean
}

input DeckEditMutationInput {
  answerLang: String
  description: JSONObject
  id: ID!
  name: String
  notes: JSONObject
  promptLang: String
}

input DecksQueryInput {
  scope: DecksQueryScope
  stoplist: [ID!]
  titleContains: String
}

"""ownership type of of decks returned"""
enum DecksQueryScope {
  OWNED
  VISIBLE
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress

input FinalizeOauthSigninMutationInput {
  code: String!
  nonce: String!
  provider: String!
  redirect_uri: String!
}

type Friendship implements Node {
  befriended: User!
  befriender: User!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type Message implements Node {
  content: JSONObject
  createdAt: DateTime!
  id: ID!
  sender: User!

  """
  The client should consider transforming the message to include a sender: { id: <id>, name: <name> } field for normalization
  """
  senderId: ID
  type: MessageContentType!
}

enum MessageContentType {
  CONFIG
  CONTEST_SCORE
  ROUND_SCORE
  ROUND_START
  ROUND_WIN
  TEXT
}

"""A message indicating an operation performed on a message."""
type MessageUpdate {
  operation: MessageUpdateOperations!
  value: Message!
}

"""Names identifying operations that trigger message updates."""
enum MessageUpdateOperations {
  MESSAGE_CREATE
}

type Mutation {
  """
  Befriend the `befriendedId` user, then resolves to the user's own profile
  """
  befriend(befriendedId: ID!): User!
  cardCreate(card: CardCreateMutationInput!, deckId: ID!): Card!
  cardDelete(id: ID!): Card!
  cardEdit(input: CardEditMutationInput!): Card!

  """add cards to a deck"""
  deckAddCards(cards: [CardCreateMutationInput!]!, deckId: ID!): Deck!

  """add a subdeck to a deck and resolve to the parent deck"""
  deckAddSubdeck(deckId: ID!, subdeckId: ID!): Deck!

  """create a new deck"""
  deckCreate(input: DeckCreateMutationInput!): Deck!

  """delete the specified deck, only if its dependents are deleted"""
  deckDelete(deckId: ID!): Deck!

  """edit a new deck"""
  deckEdit(input: DeckEditMutationInput!): Deck!

  """add a subdeck to a deck and resolve to the parent deck"""
  deckRemoveSubdeck(deckId: ID!, subdeckId: ID!): Deck!
  finalizeOauthSignin(input: FinalizeOauthSigninMutationInput!): SessionInfo
  initializeOauthSignin: String!

  """Edit the user's own profile."""
  ownProfileEdit(input: OwnProfileEditMutationInput!): User!
  recordCorrectAnswer(id: ID!): Card!
  refresh(
    """A JWT token"""
    token: JWT!
  ): SessionInfo
  roomArchive(id: ID!): Room!
  roomCreate: Room!
  roomEndRound(id: ID!): Room!
  roomJoin(id: ID!): Room!
  roomSetDeck(deckId: ID!, id: ID!): Room!
  roomStartRound(id: ID!): Room!
  sendTextMessage(roomId: ID!, textContent: String!): Message!

  """set personal notes for a deck"""
  setOwnNotes(deckId: ID!, notes: JSONObject!): Deck!

  """
  Unbefriend the `befriendedId` user, then resolves to the user's own profile
  """
  unbefriend(befriendedId: ID!): User!
}

interface Node {
  id: ID!
}

input OwnProfileEditMutationInput {
  bio: JSONObject
  isPublic: Boolean
  name: String
}

type PageInfo {
  endCursor: ID
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: ID
}

type Query {
  """users you have unilaterally befriended"""
  befriendeds(after: ID, before: ID, first: Int, last: Int): QueryBefriendedsConnection!

  """users that have befriended you"""
  befrienders(after: ID, before: ID, first: Int, last: Int): QueryBefriendersConnection!
  deck(id: ID!): Deck!
  decks(after: ID, before: ID, first: Int, input: DecksQueryInput!, last: Int): QueryDecksConnection!
  friend(id: ID!): User

  """users who are mutual friends with you"""
  friends(after: ID, before: ID, first: Int, last: Int): QueryFriendsConnection!
  health: String!
  me: User
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  occupyingUnarchivedEphemeralRooms: [Room!]
  persistentRoomByOccupants(otherOccupantIds: [ID!]!): Room
  room(id: ID!): Room
  roomBySlug(slug: String!): Room
  usersByName(name: String!): [User!]!
}

type QueryBefriendedsConnection {
  edges: [QueryBefriendedsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryBefriendedsConnectionEdge {
  cursor: ID!
  node: User!
}

type QueryBefriendersConnection {
  edges: [QueryBefriendersConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryBefriendersConnectionEdge {
  cursor: ID!
  node: User!
}

type QueryDecksConnection {
  edges: [QueryDecksConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryDecksConnectionEdge {
  cursor: ID!
  node: Deck!
}

type QueryFriendsConnection {
  edges: [QueryFriendsConnectionEdge]!
  pageInfo: PageInfo!
}

type QueryFriendsConnectionEdge {
  cursor: ID!
  node: User!
}

type Room implements Node {
  activeRound: Round
  id: ID!
  messageCount: Int!
  messages(after: ID, before: ID, first: Int, last: Int): RoomMessagesConnection!
  occupants: [User!]!
  occupantsCount: Int!
  type: RoomType!
}

type RoomMessagesConnection {
  edges: [RoomMessagesConnectionEdge]!
  pageInfo: PageInfo!
}

type RoomMessagesConnectionEdge {
  cursor: ID!
  node: Message!
}

enum RoomType {
  EPHEMERAL
  PERSISTENT
}

"""A message indicating an operation performed on a room."""
type RoomUpdate {
  operation: RoomUpdateOperations!
  value: Room!
}

"""Keys identifying operations that trigger room updates."""
enum RoomUpdateOperations {
  ROOM_ARCHIVE
  ROOM_END_ROUND
  ROOM_JOIN
  ROOM_SET_DECK
  ROOM_START_ROUND
}

type Round implements Node {
  deck: Deck!
  id: ID!
  isActive: Boolean!
  slug: String!
  state: RoundState!
}

enum RoundState {
  PLAYING
  WAITING
}

"""A token and its contained information"""
type SessionInfo {
  currentUser: JSONObject!
  token: JWT!
}

type Subdeck implements Node {
  createdAt: DateTime!
  id: ID!
  parentDeck: Deck!
  subdeck: Deck!
  updatedAt: DateTime!
}

type Subscription {
  messageUpdatesByRoomId(id: ID!): MessageUpdate!
  repeatHealth: String!
  roomUpdatesByRoomId(id: ID!): RoomUpdate!
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

type User implements Node {
  bareId: ID!
  befriendedsCount: Int!
  befriendersCount: Int!
  bio: JSONObject
  decks(after: ID, before: ID, first: Int, last: Int): UserDecksConnection!
  facebookId: String
  googleId: String
  id: ID!

  """
  whether the user's profile information is accessible by non-friends and searchable
  """
  isPublic: Boolean!
  name: String!
  roles: [String!]!
}

type UserDecksConnection {
  edges: [UserDecksConnectionEdge]!
  pageInfo: PageInfo!
}

type UserDecksConnectionEdge {
  cursor: ID!
  node: Deck!
}
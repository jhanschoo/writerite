# TODO: refactor once graphql supports `extend`
# https://github.com/graphql/graphql-js/issues/922\
#scalar Upload

enum RwRoomMessageContentType {
  TEXT
  CONFIG
}

type Query {
  _empty: String
  # RwUser
  rwUser(id: ID!): RwUser
  rwUsers: [RwUser!]
  # RwDeck
  rwDeck(id: ID!): RwDeck
  rwOwnDecks: [RwDeck!]
  # RwCard
  rwCard(id: ID!): RwCard
  rwCardsOfDeck(deckId: ID!): [RwCard!]
  # RwRoom
  rwRoom(id: ID!): RwRoom
  rwInRooms: [RwRoom!]
  # RwRoomMessage
  rwRoomMessage(id: ID!): RwRoomMessage
  rwRoomMessagesOfRoom(roomId: ID!): [RwRoomMessage!]
}

type Mutation {
  _empty: String
  # Authorization
  signin(
    email: String!
    name: String
    token: String!
    authorizer: String!
    identifier: String!
    persist: Boolean
  ): RwAuthResponse
  # Deck
  rwDeckCreate(
    name: String
    description: String
    nameLang: String
    promptLang: String
    answerLang: String
  ): RwDeck
  rwDeckCreateFromRows(
    name: String
    description: String
    nameLang: String
    promptLang: String
    answerLang: String
    rows: [[String!]!]!
  ): RwDeck
  rwDeckEdit(
    id: ID!
    name: String
    description: String
    nameLang: String
    promptLang: String
    answerLang: String
  ): RwDeck
  rwDeckDelete(id: ID!): ID
  # Card
  rwCardCreate(
    deckId: ID!
    prompt: String!
    fullAnswer: String!
    answers: [String!]
    sortKey: String
    template: Boolean
  ): RwCard
  rwCardsCreate(
    deckId: ID!
    multiplicity: Int!
    prompt: String!
    fullAnswer: String!
    answers: [String!]
    sortKey: String
    template: Boolean
  ): [RwCard!]
  rwCardEdit(
    id: ID!
    prompt: String
    fullAnswer: String
    answers: [String!]
    sortKey: String
    template: Boolean
  ): RwCard
  rwCardDelete(id: ID!): ID
  # Room
  rwRoomCreate(config: IRoomConfigInput!): RwRoom
  rwRoomUpdateConfig(id: ID! config: IRoomConfigInput!): RwRoom
  rwRoomAddOccupant(id: ID! occupantId: ID!): RwRoom
  rwRoomDeactivate(id: ID!): RwRoom
  # RoomMessage
  rwRoomMessageCreate(
    roomId: ID!
    content: String!
    contentType: RwRoomMessageContentType!
  ): RwRoomMessage
}

type Subscription {
  _empty: String
  # Deck
  rwOwnDecksUpdates: RwDeckUpdate!
  rwDeckUpdates(id: ID!): RwDeckUpdate!
  # Card
  rwCardsUpdatesOfDeck(deckId: ID!): RwCardUpdate!
  # Room
  rwRoomUpdates(id: ID!): RwRoomUpdate!
  # RoomMessage
  rwRoomMessagesUpdatesOfRoom(roomId: ID!): RwRoomMessageUpdate!
}

enum RwMutationType {
  CREATED
  UPDATED
  DELETED
}

type RwDeckUpdate {
  mutation: RwMutationType!
  new: RwDeck
  oldId: ID
}

type RwCardUpdate {
  mutation: RwMutationType!
  new: RwCard
  oldId: ID
}

type RwRoomMessageUpdate {
  mutation: RwMutationType!
  new: RwRoomMessage
  oldId: ID
}

type RwRoomUpdate {
  mutation: RwMutationType!
  new: RwRoom
  oldId: ID
}

# RwDeck

type RwDeck {
  id: ID!
  name: String!
  description: String!
  nameLang: String!
  promptLang: String!
  answerLang: String!
  owner: RwUser!
  cards: [RwCard!]!
}

# RwCard

type RwCard {
  id: ID!
  prompt: String!
  fullAnswer: String!
  answers: [String!]!
  sortKey: String!
  deck: RwDeck!
  editedAt: String!
  template: Boolean!
}

# RwRoom

type RwRoom {
  id: ID!
  inactive: Boolean!
  config: IRoomConfig!
  owner: RwUser!
  occupants: [RwUser!]!
  messages: [RwRoomMessage!]!
}

# RwRoomMessage

type RwRoomMessage {
  id: ID!
  content: String!
  contentType: RwRoomMessageContentType!
  sender: RwUser
  room: RwRoom
}

# RwAuthorization

type RwAuthResponse {
  user: RwUser!
  token: String!
}

# RwUser

type RwUser {
  id: ID!
  email: String!
  name: String
  roles: [String!]!
  decks: [RwDeck!]!
}

# IRoomConfig
input IRoomConfigInput {
  deckId: ID
  deckName: String
  deckNameLang: String
  roundLength: Int
  clientDone: Boolean
}

type IRoomConfig {
  deckId: ID
  deckName: String
  deckNameLang: String
  roundLength: Int
  clientDone: Boolean
}

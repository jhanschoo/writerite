type PUser {
  id: ID! @id
  email: String! @unique
  passwordHash: String
  googleId: String
  facebookId: String
  decks: [PDeck!]!
  # https://github.com/prisma/prisma/issues/4424
  roles: [String!]! @scalarList(strategy: RELATION)
  ownerOfRoom: [PRoom!]! @relation(name: "PUserOwningPRooms")
  occupyingRoom: [PRoom!]! @relation(name: "PUsersOccupyingPRooms")
  sentMessages: [PRoomMessage!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

# To refactor message types into inheritance once
# interfaces extending interfaces is implemented
# https://github.com/facebook/graphql/issues/295
# https://github.com/prisma/prisma/issues/83
# https://itnext.io/graphql-interfaces-and-union-types-with-prisma-and-yoga-7224f9e1d9ad

# interface Card {
#   id: ID! @id
#   deck: Deck!
# }

type PSimpleCard { # implements Card
  id: ID! @id
  deck: PDeck! @relation(link: INLINE)
  prompt: String!
  fullAnswer: String!
  sortKey: String!
  editedAt: DateTime!
  template: Boolean!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type PDeck {
  id: ID! @id
  name: String!
  owner: PUser! @relation(link: INLINE)
  # cards: [PCard!]! @relation(onDelete: CASCADE)
  cards: [PSimpleCard!]! @relation(onDelete: CASCADE)
  servedAt: [PRoom!]! @relation(onDelete: SET_NULL)
  published: Boolean! @default(value: false)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type PRoom {
  id: ID! @id
  name: String!
  owner: PUser! @relation(link: INLINE name: "PUserOwningPRooms")
  occupants: [PUser!]! @relation(name: "PUsersOccupyingPRooms")
  servingDeck: PDeck @relation(link: INLINE)
  # messages: [PRoomMessage!]!
  messages: [PRoomMessage!]!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

# To refactor message types into inheritance once
# interfaces extending interfaces is implemented
# https://github.com/facebook/graphql/issues/295
# https://github.com/prisma/prisma/issues/83
# https://itnext.io/graphql-interfaces-and-union-types-with-prisma-and-yoga-7224f9e1d9ad

# interface RoomMessage {
#   id: ID! @id
#   room: Room!
# }

# interface UserMessage {
#   sender: User!
# }

# interface SimpleMessage {
#   content: String!
# }

type PRoomMessage { # implements RoomMessage & UserMessage & SimpleMessage {
  id: ID! @id
  room: PRoom! @relation(link: INLINE)
  sender: PUser @relation(link: INLINE)
  content: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}
